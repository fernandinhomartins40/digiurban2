-- =====================================================
-- SCRIPT FINAL √öNICO - SISTEMA DE PROTOCOLOS DIGIURBAN
-- =====================================================
-- 
-- Este script ajusta APENAS o que est√° faltando na estrutura existente
-- N√£o recria tabelas, apenas adiciona o que precisa para funcionar
--
-- ESTRUTURA ATUAL ANALISADA:
-- ‚úÖ protocolos (33 colunas) - COMPLETA
-- ‚úÖ servicos_municipais (21 colunas) - Falta apenas categoria_id  
-- ‚úÖ categorias_servicos - J√Å EXISTE
-- ‚úÖ protocolos_historico - J√Å EXISTE
-- ‚úÖ protocolos_anexos - J√Å EXISTE
-- ‚úÖ user_profiles - COMPLETA
-- =====================================================

-- 1. ADICIONAR CATEGORIA_ID √Ä TABELA SERVICOS_MUNICIPAIS
-- (√önica coisa que falta para o frontend funcionar)
ALTER TABLE servicos_municipais 
ADD COLUMN IF NOT EXISTS categoria_id UUID REFERENCES categorias_servicos(id);

-- 2. POPULAR CATEGORIAS PADR√ÉO (se n√£o existirem)
INSERT INTO categorias_servicos (nome, icone, cor, descricao, ordem) VALUES
('Administra√ß√£o', 'FileText', '#3b82f6', 'Servi√ßos administrativos gerais', 1),
('Sa√∫de', 'Heart', '#ef4444', 'Servi√ßos de sa√∫de p√∫blica', 2),
('Educa√ß√£o', 'GraduationCap', '#22c55e', 'Servi√ßos educacionais', 3),
('Infraestrutura', 'Construction', '#f59e0b', 'Obras e infraestrutura urbana', 4),
('Meio Ambiente', 'Leaf', '#10b981', 'Servi√ßos ambientais', 5),
('Assist√™ncia Social', 'Users', '#8b5cf6', 'Programas sociais', 6),
('Cultura e Esporte', 'Trophy', '#f97316', 'Atividades culturais e esportivas', 7),
('Seguran√ßa', 'Shield', '#dc2626', 'Seguran√ßa p√∫blica', 8),
('Habita√ß√£o', 'Home', '#06b6d4', 'Programas habitacionais', 9),
('Transporte', 'Car', '#6366f1', 'Transporte p√∫blico', 10)
ON CONFLICT (nome) DO NOTHING;

-- 3. MAPEAR CATEGORIAS EXISTENTES PARA categoria_id
-- (Conectar dados existentes com as novas categorias)
UPDATE servicos_municipais 
SET categoria_id = (
  CASE 
    WHEN LOWER(categoria) LIKE '%admin%' OR LOWER(categoria) LIKE '%certid%' OR LOWER(categoria) LIKE '%document%' 
      THEN (SELECT id FROM categorias_servicos WHERE nome = 'Administra√ß√£o')
    WHEN LOWER(categoria) LIKE '%saude%' OR LOWER(categoria) LIKE '%medic%' OR LOWER(categoria) LIKE '%consulta%' 
      THEN (SELECT id FROM categorias_servicos WHERE nome = 'Sa√∫de')
    WHEN LOWER(categoria) LIKE '%educa%' OR LOWER(categoria) LIKE '%escola%' OR LOWER(categoria) LIKE '%matricula%' 
      THEN (SELECT id FROM categorias_servicos WHERE nome = 'Educa√ß√£o')
    WHEN LOWER(categoria) LIKE '%obra%' OR LOWER(categoria) LIKE '%reparo%' OR LOWER(categoria) LIKE '%via%' OR LOWER(categoria) LIKE '%infraestr%' 
      THEN (SELECT id FROM categorias_servicos WHERE nome = 'Infraestrutura')
    WHEN LOWER(categoria) LIKE '%social%' OR LOWER(categoria) LIKE '%auxilio%' OR LOWER(categoria) LIKE '%beneficio%' 
      THEN (SELECT id FROM categorias_servicos WHERE nome = 'Assist√™ncia Social')
    WHEN LOWER(categoria) LIKE '%cultura%' OR LOWER(categoria) LIKE '%esporte%' OR LOWER(categoria) LIKE '%evento%' 
      THEN (SELECT id FROM categorias_servicos WHERE nome = 'Cultura e Esporte')
    WHEN LOWER(categoria) LIKE '%segur%' OR LOWER(categoria) LIKE '%guarda%' 
      THEN (SELECT id FROM categorias_servicos WHERE nome = 'Seguran√ßa')
    WHEN LOWER(categoria) LIKE '%habitat%' OR LOWER(categoria) LIKE '%moradia%' OR LOWER(categoria) LIKE '%casa%' 
      THEN (SELECT id FROM categorias_servicos WHERE nome = 'Habita√ß√£o')
    WHEN LOWER(categoria) LIKE '%transport%' OR LOWER(categoria) LIKE '%onibus%' 
      THEN (SELECT id FROM categorias_servicos WHERE nome = 'Transporte')
    WHEN LOWER(categoria) LIKE '%ambiente%' OR LOWER(categoria) LIKE '%verde%' OR LOWER(categoria) LIKE '%arvore%' 
      THEN (SELECT id FROM categorias_servicos WHERE nome = 'Meio Ambiente')
    ELSE (SELECT id FROM categorias_servicos WHERE nome = 'Administra√ß√£o')
  END
)
WHERE categoria_id IS NULL;

-- 4. ADICIONAR ALGUNS SERVI√áOS EXEMPLO (se n√£o existirem)
INSERT INTO servicos_municipais (codigo, nome, descricao, categoria, categoria_id, secretaria_responsavel_id, prazo_resposta_dias, requer_documentos) 
SELECT 
  'CERT-001', 
  'Certid√£o de Resid√™ncia', 
  'Emiss√£o de certid√£o comprovando resid√™ncia no munic√≠pio',
  'Administra√ß√£o',
  c.id,
  (SELECT id FROM secretarias LIMIT 1),
  5,
  true
FROM categorias_servicos c 
WHERE c.nome = 'Administra√ß√£o'
AND NOT EXISTS (SELECT 1 FROM servicos_municipais WHERE codigo = 'CERT-001');

INSERT INTO servicos_municipais (codigo, nome, descricao, categoria, categoria_id, secretaria_responsavel_id, prazo_resposta_dias, requer_documentos) 
SELECT 
  'INFRA-001',
  'Reparo em Via P√∫blica',
  'Solicita√ß√£o de reparo de buracos, cal√ßadas e problemas na via p√∫blica',
  'Infraestrutura',
  c.id,
  (SELECT id FROM secretarias LIMIT 1),
  15,
  false
FROM categorias_servicos c 
WHERE c.nome = 'Infraestrutura'
AND NOT EXISTS (SELECT 1 FROM servicos_municipais WHERE codigo = 'INFRA-001');

INSERT INTO servicos_municipais (codigo, nome, descricao, categoria, categoria_id, secretaria_responsavel_id, prazo_resposta_dias, requer_documentos) 
SELECT 
  'SAUDE-001',
  'Agendamento de Consulta',
  'Agendar consulta m√©dica nas unidades b√°sicas de sa√∫de',
  'Sa√∫de',
  c.id,
  (SELECT id FROM secretarias LIMIT 1),
  3,
  false
FROM categorias_servicos c 
WHERE c.nome = 'Sa√∫de'
AND NOT EXISTS (SELECT 1 FROM servicos_municipais WHERE codigo = 'SAUDE-001');

-- 5. FUN√á√ÉO PARA GERAR N√öMERO DE PROTOCOLO (se n√£o existir)
CREATE OR REPLACE FUNCTION gerar_numero_protocolo_automatico()
RETURNS TRIGGER AS $$
DECLARE
  ano INTEGER;
  proximo_numero INTEGER;
  numero_protocolo VARCHAR(20);
BEGIN
  -- Se j√° tem n√∫mero, n√£o alterar
  IF NEW.numero_protocolo IS NOT NULL AND NEW.numero_protocolo != '' THEN
    RETURN NEW;
  END IF;
  
  -- Pegar o ano atual
  ano := EXTRACT(YEAR FROM NOW());
  
  -- Buscar o pr√≥ximo n√∫mero sequencial para o ano
  SELECT COALESCE(MAX(CAST(SUBSTRING(numero_protocolo FROM 11) AS INTEGER)), 0) + 1
  INTO proximo_numero
  FROM protocolos
  WHERE numero_protocolo LIKE 'PROT-' || ano || '-%';
  
  -- Gerar o n√∫mero do protocolo
  numero_protocolo := 'PROT-' || ano || '-' || LPAD(proximo_numero::TEXT, 7, '0');
  
  NEW.numero_protocolo := numero_protocolo;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 6. TRIGGER PARA GERAR N√öMERO AUTOM√ÅTICO
DROP TRIGGER IF EXISTS trigger_gerar_numero_protocolo_auto ON protocolos;
CREATE TRIGGER trigger_gerar_numero_protocolo_auto
  BEFORE INSERT ON protocolos
  FOR EACH ROW
  WHEN (NEW.numero_protocolo IS NULL OR NEW.numero_protocolo = '')
  EXECUTE FUNCTION gerar_numero_protocolo_automatico();

-- 7. POL√çTICAS RLS (apenas as essenciais)
-- Categorias p√∫blicas
ALTER TABLE categorias_servicos ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Categorias p√∫blicas" ON categorias_servicos;
CREATE POLICY "Categorias p√∫blicas" ON categorias_servicos 
  FOR SELECT USING (true);

-- Servi√ßos vis√≠veis para usu√°rios logados
ALTER TABLE servicos_municipais ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Servi√ßos vis√≠veis" ON servicos_municipais;
CREATE POLICY "Servi√ßos vis√≠veis" ON servicos_municipais 
  FOR SELECT USING (status = 'ativo' OR auth.uid() IS NOT NULL);

-- Protocolos - usu√°rios veem seus pr√≥prios + servidores veem todos
ALTER TABLE protocolos ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Protocolos vis√≠veis" ON protocolos;
CREATE POLICY "Protocolos vis√≠veis" ON protocolos 
  FOR SELECT USING (
    solicitante_id = auth.uid() OR 
    responsavel_atual_id = auth.uid() OR 
    responsavel_id = auth.uid() OR
    EXISTS (
      SELECT 1 FROM user_profiles 
      WHERE id = auth.uid() 
      AND tipo_usuario IN ('super_admin', 'admin', 'secretario', 'diretor', 'coordenador', 'funcionario', 'atendente')
    )
  );

DROP POLICY IF EXISTS "Usu√°rios podem criar protocolos" ON protocolos;
CREATE POLICY "Usu√°rios podem criar protocolos" ON protocolos 
  FOR INSERT WITH CHECK (solicitante_id = auth.uid());

DROP POLICY IF EXISTS "Servidores podem atualizar protocolos" ON protocolos;
CREATE POLICY "Servidores podem atualizar protocolos" ON protocolos 
  FOR UPDATE USING (
    responsavel_atual_id = auth.uid() OR 
    responsavel_id = auth.uid() OR
    EXISTS (
      SELECT 1 FROM user_profiles 
      WHERE id = auth.uid() 
      AND tipo_usuario IN ('super_admin', 'admin', 'secretario', 'diretor', 'coordenador', 'funcionario', 'atendente')
    )
  );

-- =====================================================
-- CONCLUS√ÉO
-- =====================================================
-- 
-- ‚úÖ AP√ìS EXECUTAR ESTE SCRIPT:
-- 
-- 1. servicos_municipais ter√° categoria_id ligada √†s categorias
-- 2. Protocolos ter√£o numera√ß√£o autom√°tica
-- 3. Frontend conseguir√° carregar servi√ßos por categoria  
-- 4. Sistema de protocolos estar√° 100% funcional
-- 5. Todas as pol√≠ticas RLS estar√£o configuradas
--
-- üéØ PR√ìXIMO PASSO:
-- Testar a cria√ß√£o de um protocolo via frontend
-- 
-- =====================================================