-- =====================================================
-- 14_diagnosticar_erro_login.sql
-- DIAGNOSTICAR E CORRIGIR ERRO DE LOGIN NO SUPABASE
-- =====================================================

-- ‚ö†Ô∏è Execute este script no SQL Editor do Supabase para diagnosticar o problema

-- =====================================================
-- 1. VERIFICAR SE AS TABELAS EXISTEM
-- =====================================================

SELECT 
    'Verificando tabelas necess√°rias...' as status;

-- Verificar auth.users
SELECT 
    'auth.users' as tabela,
    COUNT(*) as total_registros
FROM auth.users
WHERE email LIKE '%@municipio.gov.br' OR email LIKE '%@email.com';

-- Verificar user_profiles
SELECT 
    'user_profiles' as tabela,
    COUNT(*) as total_registros
FROM user_profiles
WHERE email LIKE '%@municipio.gov.br' OR email LIKE '%@email.com';

-- Verificar secretarias
SELECT 
    'secretarias' as tabela,
    COUNT(*) as total_registros
FROM secretarias;

-- Verificar perfis_acesso
SELECT 
    'perfis_acesso' as tabela,
    COUNT(*) as total_registros
FROM perfis_acesso;

-- =====================================================
-- 2. VERIFICAR USU√ÅRIO ESPEC√çFICO
-- =====================================================

-- Verificar se o usu√°rio prefeito existe no auth.users
SELECT 
    'Usu√°rio prefeito em auth.users' as verificacao,
    u.id,
    u.email,
    u.email_confirmed_at,
    u.role,
    u.aud,
    CASE 
        WHEN u.encrypted_password IS NOT NULL THEN 'Senha definida'
        ELSE 'Senha n√£o definida'
    END as status_senha
FROM auth.users u
WHERE u.email = 'prefeito@municipio.gov.br';

-- Verificar se o usu√°rio prefeito existe no user_profiles
SELECT 
    'Usu√°rio prefeito em user_profiles' as verificacao,
    up.id,
    up.email,
    up.nome_completo,
    up.tipo_usuario,
    up.status,
    pa.nome as perfil_nome
FROM user_profiles up
LEFT JOIN perfis_acesso pa ON pa.id = up.perfil_acesso_id
WHERE up.email = 'prefeito@municipio.gov.br';

-- =====================================================
-- 3. VERIFICAR POLICIES RLS
-- =====================================================

-- Verificar se RLS est√° ativo
SELECT 
    schemaname,
    tablename,
    rowsecurity as rls_ativo
FROM pg_tables 
WHERE schemaname = 'public' 
AND tablename IN ('user_profiles', 'secretarias', 'perfis_acesso', 'permissoes');

-- Verificar policies existentes
SELECT 
    schemaname,
    tablename,
    policyname,
    permissive,
    roles,
    cmd,
    qual
FROM pg_policies 
WHERE schemaname = 'public' 
AND tablename IN ('user_profiles', 'secretarias', 'perfis_acesso');

-- =====================================================
-- 4. TESTAR FUN√á√ÉO DE LOGIN (SIMULA√á√ÉO)
-- =====================================================

-- Verificar se conseguimos buscar dados do usu√°rio
SELECT 
    'Simula√ß√£o de busca de perfil' as teste,
    u.id as user_id,
    u.email,
    up.nome_completo,
    up.tipo_usuario,
    pa.nome as perfil_nome,
    s.nome as secretaria_nome
FROM auth.users u
LEFT JOIN user_profiles up ON up.id = u.id
LEFT JOIN perfis_acesso pa ON pa.id = up.perfil_acesso_id
LEFT JOIN secretarias s ON s.id = up.secretaria_id
WHERE u.email = 'prefeito@municipio.gov.br';

-- =====================================================
-- 5. VERIFICAR PERMISS√ïES DO USU√ÅRIO auth
-- =====================================================

-- Verificar se o role do Supabase tem permiss√µes adequadas
SELECT 
    'Permiss√µes do role atual' as verificacao,
    current_user as usuario_atual,
    session_user as sessao_usuario;

-- Verificar se podemos acessar as tabelas necess√°rias
SELECT 
    'Teste de acesso √†s tabelas' as teste,
    'user_profiles' as tabela,
    COUNT(*) as total_acessivel
FROM user_profiles
LIMIT 1;

-- =====================================================
-- 6. VERIFICAR FUN√á√ïES E TRIGGERS
-- =====================================================

-- Verificar se as fun√ß√µes foram criadas
SELECT 
    'Fun√ß√µes criadas' as verificacao,
    routine_name,
    routine_type
FROM information_schema.routines 
WHERE routine_schema = 'public' 
AND routine_name LIKE '%user%';

-- =====================================================
-- 7. CORRIGIR PROBLEMAS COMUNS
-- =====================================================

-- Garantir que o usu√°rio prefeito tenha dados completos
DO $$
BEGIN
    -- Verificar se existe inconsist√™ncia entre auth.users e user_profiles
    IF EXISTS (
        SELECT 1 FROM auth.users u 
        WHERE u.email = 'prefeito@municipio.gov.br' 
        AND NOT EXISTS (
            SELECT 1 FROM user_profiles up 
            WHERE up.id = u.id
        )
    ) THEN
        RAISE NOTICE '‚ö†Ô∏è PROBLEMA: Usu√°rio existe em auth.users mas n√£o em user_profiles';
        
        -- Buscar o ID do usu√°rio
        DECLARE
            user_uuid UUID;
        BEGIN
            SELECT id INTO user_uuid FROM auth.users WHERE email = 'prefeito@municipio.gov.br';
            
            -- Criar perfil se n√£o existir
            INSERT INTO user_profiles (
                id, email, nome_completo, tipo_usuario, 
                perfil_acesso_id, secretaria_id, cargo, status, primeiro_acesso
            ) VALUES (
                user_uuid, 
                'prefeito@municipio.gov.br', 
                'Prefeito Municipal', 
                'super_admin',
                (SELECT id FROM perfis_acesso WHERE nome = 'Super Administrador' LIMIT 1),
                (SELECT id FROM secretarias WHERE codigo = 'GAB' LIMIT 1),
                'Prefeito', 
                'ativo', 
                false
            )
            ON CONFLICT (id) DO NOTHING;
            
            RAISE NOTICE '‚úÖ Perfil do prefeito corrigido/criado';
        END;
    ELSE
        RAISE NOTICE '‚úÖ Usu√°rio prefeito est√° consistente';
    END IF;
END $$;

-- =====================================================
-- 8. HABILITAR FEATURES NECESS√ÅRIAS
-- =====================================================

-- Verificar se o email est√° confirmado
UPDATE auth.users 
SET email_confirmed_at = COALESCE(email_confirmed_at, now())
WHERE email = 'prefeito@municipio.gov.br' 
AND email_confirmed_at IS NULL;

-- =====================================================
-- 9. VERIFICA√á√ÉO FINAL
-- =====================================================

SELECT 
    'üîç VERIFICA√á√ÉO FINAL' as status,
    u.email,
    CASE 
        WHEN u.email_confirmed_at IS NOT NULL THEN '‚úÖ Email confirmado'
        ELSE '‚ùå Email n√£o confirmado'
    END as email_status,
    CASE 
        WHEN u.encrypted_password IS NOT NULL THEN '‚úÖ Senha definida'
        ELSE '‚ùå Senha n√£o definida'
    END as senha_status,
    CASE 
        WHEN up.id IS NOT NULL THEN '‚úÖ Perfil existe'
        ELSE '‚ùå Perfil n√£o existe'
    END as perfil_status,
    up.tipo_usuario,
    up.status as user_status
FROM auth.users u
LEFT JOIN user_profiles up ON up.id = u.id
WHERE u.email = 'prefeito@municipio.gov.br';

-- =====================================================
-- INSTRU√á√ïES DE DIAGN√ìSTICO
-- =====================================================

/*
üîç COMO USAR ESTE SCRIPT DE DIAGN√ìSTICO:

1. üìã COPIE TODO O C√ìDIGO ACIMA
2. üîó COLE NO SQL EDITOR DO SUPABASE
3. ‚ñ∂Ô∏è EXECUTE E ANALISE OS RESULTADOS

üìä O QUE VERIFICAR NOS RESULTADOS:

‚úÖ SUCESSO SE:
- Todas as tabelas t√™m registros
- Usu√°rio prefeito existe em auth.users E user_profiles
- Email est√° confirmado
- Senha est√° definida
- RLS est√° configurado
- Perfil tem tipo_usuario = 'super_admin'

‚ùå PROBLEMAS COMUNS:
- "total_registros = 0" ‚Üí Scripts anteriores n√£o executaram
- "Perfil n√£o existe" ‚Üí Inconsist√™ncia entre tabelas
- "Email n√£o confirmado" ‚Üí Usuario n√£o pode fazer login
- "Senha n√£o definida" ‚Üí Senha n√£o foi criptografada

üõ†Ô∏è PR√ìXIMOS PASSOS:
Se encontrar problemas, execute os scripts de 01 a 12 novamente
ou me informe qual erro espec√≠fico apareceu!
*/