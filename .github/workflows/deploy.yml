name: 🚀 Deploy DigiUrban

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  VPS_HOST: '82.25.69.57'
  VPS_USER: 'root'
  DOMAIN: 'fuseloja.com.br'

jobs:
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 🔧 Install Dependencies
      run: npm ci --silent

    - name: 🏗️ Build Application
      run: |
        npm run build
        echo "✅ Build completed successfully"

  deploy:
    name: 🚀 Deploy to VPS
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.VPS_HOST }}
        username: ${{ env.VPS_USER }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        timeout: 10m
        script: |
          echo "🚀 Starting deployment to ${{ env.DOMAIN }}..."
          
          # Create application directory
          mkdir -p /opt/digiurban
          cd /opt/digiurban
          
          # Install system dependencies
          echo "📦 Installing system dependencies..."
          apt update -y
          apt install -y curl git wget unzip postgresql-client
          
          # Install Node.js 18 properly
          echo "📦 Installing Node.js 18..."
          if ! command -v node &> /dev/null || [[ "$(node --version)" != "v18"* ]]; then
            # Remove any existing nodejs/npm to avoid conflicts
            apt remove -y nodejs npm 2>/dev/null || true
            apt autoremove -y 2>/dev/null || true
            
            # Install Node.js 18 from NodeSource
            curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
            apt install -y nodejs
            
            # Verify installation
            node --version
            npm --version
          fi
          
          # Verify Node.js
          echo "✅ Node.js version: $(node --version)"
          echo "✅ NPM version: $(npm --version)"
          
          # Backup current deployment
          if [ -d "current" ]; then
            echo "📦 Creating backup..."
            cp -r current backup_$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
            find . -name "backup_*" -type d -mtime +7 -exec rm -rf {} + 2>/dev/null || true
          fi
          
          # Download repository (try multiple methods)
          echo "📥 Downloading latest code..."
          rm -rf digiurban2
          
          # Method 1: Try with GitHub token
          if wget --header="Authorization: token ${{ secrets.GITHUB_TOKEN }}" -O main.zip "https://github.com/fernandinhomartins040/digiurban2/archive/refs/heads/main.zip"; then
            echo "✅ Downloaded with GitHub token"
            unzip -q main.zip
            mv digiurban2-main digiurban2
            rm main.zip
          # Method 2: Try public download
          elif wget -O main.zip "https://github.com/fernandinhomartins040/digiurban2/archive/main.zip"; then
            echo "✅ Downloaded public archive"
            unzip -q main.zip
            mv digiurban2-main digiurban2
            rm main.zip
          # Method 3: Try git clone with token
          elif git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/fernandinhomartins040/digiurban2.git; then
            echo "✅ Git clone with token successful"
          # Method 4: Try public git clone
          elif git clone https://github.com/fernandinhomartins040/digiurban2.git; then
            echo "✅ Public git clone successful"
          else
            echo "❌ All download methods failed"
            echo "Repository may be private or inaccessible"
            exit 1
          fi
          
          echo "✅ Code updated successfully"
          
          # Install dependencies and build
          echo "📦 Installing dependencies..."
          cd digiurban2
          npm ci --silent
          
          echo "🏗️ Building application..."
          npm run build
          
          # Verify build
          if [ ! -f "dist-server/server/index.js" ]; then
            echo "❌ Build failed - server file not found"
            exit 1
          fi
          
          if [ ! -d "dist" ]; then
            echo "❌ Build failed - frontend dist not found"
            exit 1
          fi
          
          # Copy frontend to backend public
          mkdir -p dist-server/public
          cp -r dist/* dist-server/public/
          
          echo "✅ Build completed successfully"
          
          # Update current symlink
          cd /opt/digiurban
          rm -f current
          ln -sf digiurban2 current
          
          # Create digiurban user if not exists
          if ! id "digiurban" &>/dev/null; then
            echo "👤 Creating digiurban user..."
            useradd -r -s /bin/bash -d /opt/digiurban -c "DigiUrban Application" digiurban
          fi
          
          # Setup environment
          echo "⚙️ Setting up environment..."
          cd current
          cat > .env << EOF
          NODE_ENV=production
          PORT=3003
          DATABASE_URL=postgres://digiurban:DigiUrban2024!@localhost:5432/digiurban_db
          JWT_SECRET=DigiUrban2024SecretKeyVeryLongAndSecureForJWT12345
          CORS_ORIGIN=https://${{ env.DOMAIN }}
          APP_URL=https://${{ env.DOMAIN }}
          API_URL=https://${{ env.DOMAIN }}/api
          EOF
          
          # Setup PostgreSQL
          echo "🗄️ Setting up PostgreSQL..."
          if ! command -v psql &> /dev/null; then
            apt install -y postgresql postgresql-contrib
            systemctl start postgresql
            systemctl enable postgresql
          fi
          
          systemctl start postgresql
          
          # Create database and user
          sudo -u postgres psql -c "CREATE DATABASE digiurban_db;" 2>/dev/null || echo "Database may already exist"
          sudo -u postgres psql -c "CREATE USER digiurban WITH PASSWORD 'DigiUrban2024!';" 2>/dev/null || echo "User may already exist"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE digiurban_db TO digiurban;" 2>/dev/null
          sudo -u postgres psql -c "ALTER USER digiurban CREATEDB;" 2>/dev/null
          
          echo "✅ Database setup completed"
          
          # Setup systemd service
          echo "⚙️ Setting up systemd service..."
          cp systemd/digiurban.service /etc/systemd/system/
          
          # Set permissions
          chown -R digiurban:digiurban /opt/digiurban
          chmod -R 755 /opt/digiurban
          mkdir -p /opt/digiurban/logs
          chown -R digiurban:digiurban /opt/digiurban/logs
          
          # Reload and start service
          systemctl daemon-reload
          systemctl enable digiurban.service
          systemctl stop digiurban.service 2>/dev/null || true
          systemctl start digiurban.service
          
          # Wait for service to start
          sleep 15
          
          # Check service status
          if systemctl is-active --quiet digiurban.service; then
            echo "✅ DigiUrban service started successfully"
          else
            echo "❌ Service failed to start"
            systemctl status digiurban.service --no-pager -l
            journalctl -u digiurban.service --no-pager -l -n 20
            exit 1
          fi
          
          # Health check
          echo "🔍 Running health check..."
          sleep 10
          
          for i in {1..10}; do
            if curl -f http://localhost:3003/api/health >/dev/null 2>&1; then
              echo "✅ Health check passed!"
              break
            elif [ $i -eq 10 ]; then
              echo "❌ Health check failed after 10 attempts"
              echo "Service status:"
              systemctl status digiurban.service --no-pager -l
              echo "Recent logs:"
              journalctl -u digiurban.service --no-pager -l -n 30
              exit 1
            else
              echo "⏳ Health check attempt $i/10..."
              sleep 5
            fi
          done
          
          # Final verification
          echo "🔍 Final verification..."
          echo "📊 Service status:"
          systemctl status digiurban.service --no-pager -l
          
          echo "🌐 Testing endpoints:"
          curl -s http://localhost:3003/api/health | head -3 || echo "Health endpoint accessible"
          
          echo "🎉 Deployment completed successfully!"
          echo "🌍 Application is live at: https://${{ env.DOMAIN }}"
          echo "🔗 Health check: http://${{ env.VPS_HOST }}:3003/api/health"

    - name: 📊 Deployment Summary
      if: always()
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Domain:** ${{ env.DOMAIN }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Server:** ${{ env.VPS_HOST }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp:** $(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${GITHUB_SHA:0:7}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [🌐 Website](https://${{ env.DOMAIN }})" >> $GITHUB_STEP_SUMMARY
        echo "- [❤️ Health Check](http://${{ env.VPS_HOST }}:3003/api/health)" >> $GITHUB_STEP_SUMMARY