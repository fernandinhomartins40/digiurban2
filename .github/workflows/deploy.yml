name: 🚀 Deploy DigiUrban2 React App (Docker)

# Controle de concorrência - ÚNICO deploy por vez
concurrency:
  group: digiurban2-production-deploy
  cancel-in-progress: true

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'package*.json'
      - 'Dockerfile'
      - 'nginx.conf'
      - '.dockerignore'
      - '.github/workflows/**'
  workflow_dispatch:

env:
  VPS_HOST: '31.97.85.98'
  VPS_USER: 'root'
  APP_DIR: '/root/digiurban2'
  APP_PORT: '3003'
  IMAGE_NAME: 'digiurban2-react'

jobs:
  analyze-changes:
    name: 🔍 Analisar Mudanças
    runs-on: ubuntu-latest
    outputs:
      has_code_changes: ${{ steps.changes.outputs.has_code_changes }}
      has_package_changes: ${{ steps.changes.outputs.has_package_changes }}
      has_config_changes: ${{ steps.changes.outputs.has_config_changes }}
      needs_restart: ${{ steps.changes.outputs.needs_restart }}
      deploy_type: ${{ steps.changes.outputs.deploy_type }}
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: 🔍 Analisar arquivos alterados
      id: changes
      run: |
        echo "🔍 Analisando mudanças desde o último commit..."
        
        # Obter arquivos alterados
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "all")
        echo "📁 Arquivos alterados:"
        echo "$CHANGED_FILES"
        
        # Inicializar flags
        HAS_CODE=false
        HAS_PACKAGE=false
        HAS_CONFIG=false
        NEEDS_RESTART=false
        
        # Analisar tipos de mudanças para DigiUrban2 React App
        if echo "$CHANGED_FILES" | grep -E "(src/.*\.(js|ts|tsx|jsx|json)|vite\.config\.(js|ts)|index\.html|Dockerfile|nginx\.conf)" > /dev/null; then
          HAS_CODE=true
          echo "✅ Mudanças de código frontend detectadas"
        fi
        
        if echo "$CHANGED_FILES" | grep -E "package(-lock)?\.json" > /dev/null; then
          HAS_PACKAGE=true
          echo "📦 Mudanças em dependências detectadas"
        fi
        
        if echo "$CHANGED_FILES" | grep -E "(\.env|vite\.config\.(js|ts)|tailwind\.config\.(js|ts)|Dockerfile|\.dockerignore|nginx\.conf)" > /dev/null; then
          HAS_CONFIG=true
          echo "⚙️ Mudanças de configuração detectadas"
        fi
        
        # Determinar se precisa restart
        if [[ "$HAS_CODE" == "true" || "$HAS_CONFIG" == "true" ]]; then
          NEEDS_RESTART=true
        fi
        
        # Determinar tipo de deploy
        if [[ "$HAS_PACKAGE" == "true" ]]; then
          DEPLOY_TYPE="full"
          echo "🔄 Deploy completo necessário (dependências mudaram)"
        elif [[ "$HAS_CODE" == "true" ]]; then
          DEPLOY_TYPE="code-only"
          echo "📝 Deploy apenas de código"
        elif [[ "$HAS_CONFIG" == "true" ]]; then
          DEPLOY_TYPE="config-only"
          echo "⚙️ Deploy apenas de configuração"
        else
          DEPLOY_TYPE="minimal"
          echo "📋 Deploy mínimo (docs/workflows)"
        fi
        
        # Definir outputs
        echo "has_code_changes=$HAS_CODE" >> $GITHUB_OUTPUT
        echo "has_package_changes=$HAS_PACKAGE" >> $GITHUB_OUTPUT
        echo "has_config_changes=$HAS_CONFIG" >> $GITHUB_OUTPUT
        echo "needs_restart=$NEEDS_RESTART" >> $GITHUB_OUTPUT
        echo "deploy_type=$DEPLOY_TYPE" >> $GITHUB_OUTPUT

  deploy:
    name: 🚀 Deploy Docker
    runs-on: ubuntu-latest
    needs: analyze-changes
    timeout-minutes: 20
    
    steps:
    - name: 📋 Info do Deploy Docker
      run: |
        echo "🚀 Deploy DigiUrban2 React App com Docker"
        echo "=============================================="
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Tipo de Deploy: ${{ needs.analyze-changes.outputs.deploy_type }}"
        echo "Mudanças de Código: ${{ needs.analyze-changes.outputs.has_code_changes }}"
        echo "Mudanças de Dependências: ${{ needs.analyze-changes.outputs.has_package_changes }}"
        echo "Precisa Restart: ${{ needs.analyze-changes.outputs.needs_restart }}"
        echo "=============================================="

    - name: 🔑 Configurar SSH
      run: |
        echo "🔑 Configurando SSH para deploy..."
        mkdir -p ~/.ssh
        
        # Escrever a chave SSH de forma segura
        echo "${{ secrets.VPS_PASSWORD }}" | tr -d '\r' > ~/.ssh/id_rsa
        
        # Verificar se a chave foi escrita corretamente
        if [ ! -s ~/.ssh/id_rsa ]; then
          echo "❌ Erro: Chave SSH vazia ou não encontrada"
          exit 1
        fi
        
        # Definir permissões corretas
        chmod 600 ~/.ssh/id_rsa
        chmod 700 ~/.ssh
        
        # Verificar formato da chave
        if ! grep -q "BEGIN.*PRIVATE KEY" ~/.ssh/id_rsa; then
          echo "❌ Erro: Formato de chave SSH inválido"
          head -2 ~/.ssh/id_rsa
          exit 1
        fi
        
        # Adicionar host conhecido
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts
        
        # Testar conexão SSH
        echo "🔍 Testando conexão SSH..."
        ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "echo 'Conexão SSH bem-sucedida'"
        
        echo "✅ SSH configurado e testado"

    - name: 🔍 Verificar estado atual da VPS
      run: |
        echo "🔍 Verificando estado atual..."
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          echo '=== Estado Atual da VPS ==='
          echo 'Docker version:'
          docker --version || echo 'Docker não encontrado'
          
          echo ''
          echo 'Docker Containers:'
          docker ps --format 'table {{.Names}}\t{{.Status}}' | grep ${{ env.IMAGE_NAME }} || echo 'Container não rodando'
          
          echo ''
          echo 'Última atualização:'
          cd ${{ env.APP_DIR }} && git log --oneline -1 2>/dev/null || echo 'Repositório não inicializado'
        "

    - name: 🚀 Deploy usando Docker
      run: |
        echo "🚀 Executando deploy com Docker..."
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          # Garantir que o diretório existe
          mkdir -p ${{ env.APP_DIR }}
          cd ${{ env.APP_DIR }}
          
          # Clonar ou atualizar o repositório
          if [ ! -d .git ]; then
            echo '🆕 Clonando repositório...'
            git clone https://github.com/${{ github.repository }}.git .
          else
            echo '📥 Atualizando repositório...'
            git fetch origin
            git reset --hard origin/main
          fi
          
          # Deploy DigiUrban2 React App usando Docker
          echo '🚀 Executando deploy DigiUrban2 React App com Docker...'
          
          # Parar e remover container anterior se existir
          echo '🔄 Parando container anterior...'
          docker stop ${{ env.IMAGE_NAME }} 2>/dev/null || true
          docker rm ${{ env.IMAGE_NAME }} 2>/dev/null || true
          
          # Limpar imagem anterior se mudanças significativas
          if [[ '${{ needs.analyze-changes.outputs.has_package_changes }}' == 'true' ]]; then
            echo '🧹 Limpando imagem anterior (dependências mudaram)...'
            docker rmi ${{ env.IMAGE_NAME }}:latest 2>/dev/null || true
          fi
          
          # Build da imagem Docker
          echo '🏗️ Building Docker image...'
          docker build -t ${{ env.IMAGE_NAME }}:latest .
          
          # Verificar se a imagem foi criada
          if ! docker images | grep -q ${{ env.IMAGE_NAME }}; then
            echo '❌ Falha ao criar imagem Docker!'
            exit 1
          fi
          
          echo '✅ Imagem Docker criada com sucesso'
          
          # Iniciar container na porta especificada
          echo '🚀 Iniciando container na porta ${{ env.APP_PORT }}...'
          docker run -d \
            --name ${{ env.IMAGE_NAME }} \
            -p ${{ env.APP_PORT }}:80 \
            --restart unless-stopped \
            ${{ env.IMAGE_NAME }}:latest
          
          # Aguardar container inicializar
          echo '⏳ Aguardando container inicializar...'
          sleep 15
          
          # Verificar se container está rodando
          if ! docker ps | grep -q ${{ env.IMAGE_NAME }}; then
            echo '❌ Container não está rodando!'
            echo '📋 Status do container:'
            docker ps -a | grep ${{ env.IMAGE_NAME }} || echo 'Container não encontrado'
            echo '📋 Logs do container:'
            docker logs ${{ env.IMAGE_NAME }} 2>/dev/null || echo 'Sem logs disponíveis'
            exit 1
          fi
          
          # Verificar se está funcionando
          echo '🔍 Testando React app...'
          for i in {1..5}; do
            if curl -f -s http://localhost:${{ env.APP_PORT }}/ >/dev/null 2>&1; then
              echo '✅ React app funcionando!'
              break
            else
              echo \"⏳ Tentativa \$i/5...\"
              sleep 5
            fi
            
            if [ \$i -eq 5 ]; then
              echo '❌ React app não respondeu após 5 tentativas'
              echo '📋 Logs do container:'
              docker logs ${{ env.IMAGE_NAME }}
              exit 1
            fi
          done
          
          echo '✅ DigiUrban2 React App deployed successfully on port ${{ env.APP_PORT }}'
          echo '📊 Status do container:'
          docker ps | grep ${{ env.IMAGE_NAME }}
          echo '✅ Deploy containerizado concluído'
        "

    - name: 🔍 Verificação Final
      run: |
        echo "🔍 Verificação final..."
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.APP_DIR }}
          
          # Verificar status do container
          echo '🔍 Status do container:'
          if docker ps | grep -q ${{ env.IMAGE_NAME }}; then
            echo '✅ Container rodando'
            docker ps | grep ${{ env.IMAGE_NAME }}
          else
            echo '❌ Container não encontrado'
            exit 1
          fi
          
          # Verificar health check da aplicação React
          echo '🔍 Testando aplicação React...'
          if curl -f -s http://localhost:${{ env.APP_PORT }}/ >/dev/null 2>&1; then
            echo '✅ Aplicação React respondendo'
          else
            echo '❌ Aplicação React não está respondendo'
            docker logs ${{ env.IMAGE_NAME }} --tail 10
            exit 1
          fi
        "

    - name: 📊 Relatório do Deploy
      if: always()
      run: |
        echo "📊 RELATÓRIO DO DEPLOY DOCKER"
        echo "============================="
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          echo 'Tipo de Deploy: ${{ needs.analyze-changes.outputs.deploy_type }}'
          echo 'Restart Executado: ${{ needs.analyze-changes.outputs.needs_restart }}'
          echo 'Dependências Atualizadas: ${{ needs.analyze-changes.outputs.has_package_changes }}'
          echo ''
          
          echo '=== Status do Container ==='
          if docker ps | grep -q ${{ env.IMAGE_NAME }}; then
            docker ps | grep ${{ env.IMAGE_NAME }}
          else
            echo '❌ Container não encontrado'
          fi
          
          echo ''
          echo '=== Último Commit ==='
          cd ${{ env.APP_DIR }} && git log --oneline -1
          
          echo ''
          echo '🎯 Aplicação React: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}'
          echo '⚡ Deploy Docker DigiUrban2 concluído!'
        "

    - name: 🎉 Deploy Concluído
      run: |
        echo "🎉 DEPLOY DOCKER DIGIURBAN2 REALIZADO COM SUCESSO!"
        echo "⚡ Tipo: ${{ needs.analyze-changes.outputs.deploy_type }}"
        echo "🐳 Deploy isolado em container Docker"
        echo "🚀 Aplicação React: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}"