name: 🚀 Deploy DigiUrban

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if no changes'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  APP_NAME: 'digiurban-minimal'
  DEPLOY_PATH: '/opt/digiurban'

jobs:
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: 🔧 Install Dependencies
      run: npm ci --silent

    - name: 🏗️ Build Frontend
      run: |
        npm run build
        echo "✅ Frontend build completed"

    - name: 🧪 Test Backend Startup
      env:
        NODE_ENV: test
        JWT_SECRET: test-secret-for-build
        DATABASE_URL: postgres://test:test@localhost:5432/test
      run: |
        echo "Testing backend startup..."
        timeout 10s npm run start || echo "✅ Backend startup test completed"

    - name: 📊 Build Summary
      run: |
        echo "## 📊 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Frontend build: $(du -sh dist | cut -f1)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Backend size: $(du -sh src/server | cut -f1)" >> $GITHUB_STEP_SUMMARY
        echo "- 📦 Dependencies: $(ls node_modules | wc -l) packages" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: 🚀 Deploy to VPS
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup deployment variables
      run: |
        echo "TIMESTAMP=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_ENV
        echo "COMMIT_HASH=${GITHUB_SHA:0:7}" >> $GITHUB_ENV

    - name: 🚀 Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        timeout: 600s
        script: |
          echo "🚀 Starting deployment..."
          
          # Install system dependencies
          echo "📦 Installing system dependencies..."
          apt update -y
          apt install -y curl git wget unzip postgresql-client
          
          # Install Node.js 18 if not exists
          if ! command -v node &> /dev/null; then
            echo "📦 Installing Node.js 18..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
            apt install -y nodejs
          fi
          
          # Verify Node.js installation
          echo "✅ Node.js version: $(node --version)"
          echo "✅ NPM version: $(npm --version)"
          
          # Create directories
          mkdir -p ${{ env.DEPLOY_PATH }}
          cd ${{ env.DEPLOY_PATH }}
          
          # Backup current deployment
          if [ -d "current" ]; then
            echo "📦 Creating backup..."
            cp -r current backup_$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
            # Keep only last 3 backups
            ls -dt backup_* | tail -n +4 | xargs rm -rf 2>/dev/null || true
          fi
          
          # Clone repository
          echo "📥 Cloning repository..."
          rm -rf digiurban2
          
          # Configure Git for non-interactive clone
          git config --global user.email "deploy@digiurban.com"
          git config --global user.name "Deploy Bot"
          git config --global init.defaultBranch main
          
          # Use wget method first (more reliable for public repos)
          echo "📥 Downloading repository..."
          
          # Try different archive URLs
          if wget -O main.zip "https://github.com/${{ github.repository }}/archive/main.zip"; then
            echo "✅ Downloaded main.zip"
          elif wget -O main.zip "https://github.com/${{ github.repository }}/archive/refs/heads/main.zip"; then
            echo "✅ Downloaded main.zip (alternative URL)"
          else
            echo "❌ Wget failed, trying git clone..."
            # Remove any failed download files
            rm -f main.zip
            
            # Fallback to git clone with public URL
            if git clone https://github.com/${{ github.repository }}.git; then
              echo "✅ Git clone successful"
            else
              echo "❌ All download methods failed"
              exit 1
            fi
          fi
          
          # If we have a zip file, extract it
          if [ -f "main.zip" ]; then
            echo "📦 Extracting archive..."
            if unzip -q main.zip; then
              # Find the extracted directory (could be digiurban2-main or fernandinhomartins040-digiurban2-*)
              EXTRACTED_DIR=$(find . -maxdepth 1 -type d -name "*digiurban2*" ! -name "digiurban2" | head -1)
              if [ -n "$EXTRACTED_DIR" ]; then
                mv "$EXTRACTED_DIR" digiurban2
                echo "✅ Archive extracted and renamed to digiurban2"
              else
                echo "❌ Could not find extracted directory"
                ls -la
                exit 1
              fi
              rm main.zip
            else
              echo "❌ Failed to extract archive"
              exit 1
            fi
          fi
          
          if [ ! -d "digiurban2" ]; then
            echo "❌ Repository directory not found after clone"
            exit 1
          fi
          
          cd digiurban2
          echo "✅ Repository cloned successfully"
          
          # Install dependencies and build
          echo "📦 Installing dependencies..."
          npm ci --silent
          
          echo "🏗️ Building application..."
          npm run build
          
          # Verify frontend build
          if [ ! -d "dist" ]; then
            echo "❌ Frontend build failed - dist directory not found"
            exit 1
          fi
          
          # Copy frontend build to backend public
          echo "📂 Copying frontend build to backend..."
          mkdir -p src/server/public
          cp -r dist/* src/server/public/
          
          # Update current symlink
          cd ${{ env.DEPLOY_PATH }}
          rm -f current
          ln -sf digiurban2 current
          
          # Setup environment
          cd current
          if [ ! -f .env ]; then
            echo "⚙️ Creating environment file..."
            cat > .env << EOF
          NODE_ENV=production
          PORT=5000
          DATABASE_URL=postgres://digiurban:${{ secrets.DB_PASSWORD || 'postgres' }}@localhost:5432/digiurban_db
          JWT_SECRET=${{ secrets.JWT_SECRET || 'change-this-secret-in-production' }}
          CORS_ORIGIN=https://www.digiurban.com.br
          EOF
          fi
          
          # Setup PostgreSQL database if needed
          echo "🗄️ Setting up database..."
          if ! sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw digiurban_db; then
            sudo -u postgres createdb digiurban_db
            sudo -u postgres psql -c "CREATE USER digiurban WITH PASSWORD '${{ secrets.DB_PASSWORD || 'postgres' }}';"
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE digiurban_db TO digiurban;"
          fi
          
          # Run database migrations
          echo "🔄 Running database migrations..."
          npm run migrate 2>/dev/null || echo "⚠️ Migration command not found or failed"
          
          # Install PM2 if not exists
          if ! command -v pm2 &> /dev/null; then
            echo "📦 Installing PM2..."
            npm install -g pm2
          fi
          
          # Start/restart application
          echo "🔄 Starting application..."
          pm2 delete ${{ env.APP_NAME }} 2>/dev/null || true
          pm2 start ecosystem.config.js --env production
          pm2 save
          
          # Setup PM2 startup (if first time)
          pm2 startup systemd -u $USER --hp /home/$USER 2>/dev/null || true
          
          echo "✅ Deployment completed!"
          
          # Health check
          echo "🔍 Running health check..."
          sleep 15
          if curl -f http://localhost:5000/api/health > /dev/null 2>&1; then
            echo "✅ Health check passed!"
          else
            echo "❌ Health check failed"
            pm2 logs ${{ env.APP_NAME }} --lines 20
            exit 1
          fi

    - name: 🔍 Verify Deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        password: ${{ secrets.VPS_PASSWORD }}
        script: |
          echo "🔍 Deployment verification..."
          
          # Check PM2 status
          echo "📊 PM2 Status:"
          pm2 status ${{ env.APP_NAME }}
          
          # Check application logs
          echo "📋 Recent logs:"
          pm2 logs ${{ env.APP_NAME }} --lines 10 --nostream
          
          # Test endpoints
          echo "🌐 Testing endpoints..."
          curl -s http://localhost:5000/api/health | jq '.' 2>/dev/null || echo "Health endpoint OK"
          curl -s http://localhost:5000/ | head -5 || echo "Root endpoint OK"
          
          echo "✅ Verification completed!"

    - name: 📊 Deployment Summary
      if: always()
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Server:** ${{ secrets.VPS_HOST }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp:** $(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ env.COMMIT_HASH }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL:** https://www.digiurban.com.br" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [🌐 Website](https://www.digiurban.com.br)" >> $GITHUB_STEP_SUMMARY
        echo "- [❤️ Health Check](http://${{ secrets.VPS_HOST }}:5000/api/health)" >> $GITHUB_STEP_SUMMARY
        echo "- [📊 API Status](http://${{ secrets.VPS_HOST }}:5000/)" >> $GITHUB_STEP_SUMMARY

  notify:
    name: 📢 Notify Results
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📢 Success Notification
      if: needs.deploy.result == 'success'
      run: |
        echo "🎉 Deployment successful!"
        echo "✅ Application is live at https://www.digiurban.com.br"
        
    - name: 🚨 Failure Notification
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        echo "Check the logs above for details."
        exit 1 