#!/bin/bash

# =============================================================================
# Script de Instala√ß√£o Inicial do Servidor DigiUrban
# =============================================================================
# Este script configura o servidor VPS do zero para hospedar o DigiUrban
# Execute com: curl -fsSL https://raw.githubusercontent.com/seu-usuario/digiurban2/main/scripts/install-server.sh | bash
# =============================================================================

set -e

echo "üöÄ Iniciando instala√ß√£o do servidor DigiUrban..."

# Verificar se est√° rodando como root
if [[ $EUID -ne 0 ]]; then
   echo "‚ùå Este script deve ser executado como root"
   echo "üí° Execute: sudo bash install-server.sh"
   exit 1
fi

# =============================================================================
# 1. ATUALIZA√á√ÉO DO SISTEMA
# =============================================================================

echo "üì¶ Atualizando sistema..."
apt-get update -y
apt-get upgrade -y

# =============================================================================
# 2. INSTALA√á√ÉO DE DEPEND√äNCIAS B√ÅSICAS
# =============================================================================

echo "üîß Instalando depend√™ncias b√°sicas..."
apt-get install -y \
    curl \
    wget \
    git \
    unzip \
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    gnupg \
    lsb-release \
    nano \
    htop \
    tree \
    build-essential

# =============================================================================
# 3. INSTALA√á√ÉO DO DOCKER
# =============================================================================

echo "üê≥ Instalando Docker..."
if ! command -v docker &> /dev/null; then
    # Remover vers√µes antigas
    apt-get remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true
    
    # Instalar Docker
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    
    # Configurar Docker para iniciar automaticamente
    systemctl start docker
    systemctl enable docker
    
    # Adicionar usu√°rio ao grupo docker
    usermod -aG docker $USER
    
    echo "‚úÖ Docker instalado com sucesso!"
else
    echo "‚ÑπÔ∏è  Docker j√° est√° instalado."
fi

# =============================================================================
# 4. INSTALA√á√ÉO DO DOCKER COMPOSE
# =============================================================================

echo "üêô Instalando Docker Compose..."
if ! command -v docker-compose &> /dev/null; then
    # Instalar Docker Compose
    curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    
    # Criar link simb√≥lico
    ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
    
    echo "‚úÖ Docker Compose instalado com sucesso!"
else
    echo "‚ÑπÔ∏è  Docker Compose j√° est√° instalado."
fi

# =============================================================================
# 5. INSTALA√á√ÉO DO NGINX
# =============================================================================

echo "üåê Instalando Nginx..."
if ! command -v nginx &> /dev/null; then
    apt-get install -y nginx
    
    # Configurar Nginx para iniciar automaticamente
    systemctl start nginx
    systemctl enable nginx
    
    echo "‚úÖ Nginx instalado com sucesso!"
else
    echo "‚ÑπÔ∏è  Nginx j√° est√° instalado."
fi

# =============================================================================
# 6. INSTALA√á√ÉO DO CERTBOT (SSL)
# =============================================================================

echo "üîí Instalando Certbot..."
if ! command -v certbot &> /dev/null; then
    apt-get install -y certbot python3-certbot-nginx
    
    echo "‚úÖ Certbot instalado com sucesso!"
else
    echo "‚ÑπÔ∏è  Certbot j√° est√° instalado."
fi

# =============================================================================
# 7. INSTALA√á√ÉO DO FAIL2BAN (SEGURAN√áA)
# =============================================================================

echo "üõ°Ô∏è  Instalando Fail2Ban..."
if ! command -v fail2ban-client &> /dev/null; then
    apt-get install -y fail2ban
    
    # Configurar Fail2Ban b√°sico
    cat > /etc/fail2ban/jail.local << EOF
[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 3

[sshd]
enabled = true
port = ssh
logpath = /var/log/auth.log
maxretry = 3

[nginx-http-auth]
enabled = true
port = http,https
logpath = /var/log/nginx/error.log

[nginx-limit-req]
enabled = true
port = http,https
logpath = /var/log/nginx/error.log
maxretry = 10
EOF
    
    systemctl start fail2ban
    systemctl enable fail2ban
    
    echo "‚úÖ Fail2Ban instalado e configurado!"
else
    echo "‚ÑπÔ∏è  Fail2Ban j√° est√° instalado."
fi

# =============================================================================
# 8. CONFIGURA√á√ÉO DO FIREWALL
# =============================================================================

echo "üî• Configurando firewall..."
ufw --force enable
ufw allow ssh
ufw allow 80/tcp
ufw allow 443/tcp
ufw allow 5432/tcp
ufw allow 6379/tcp
ufw --force reload

echo "‚úÖ Firewall configurado!"

# =============================================================================
# 9. CRIA√á√ÉO DO USU√ÅRIO DE DEPLOY
# =============================================================================

echo "üë§ Criando usu√°rio de deploy..."
if ! id "digiurban" &>/dev/null; then
    # Criar usu√°rio
    useradd -m -s /bin/bash digiurban
    
    # Adicionar ao grupo sudo e docker
    usermod -aG sudo digiurban
    usermod -aG docker digiurban
    
    # Configurar sudo sem senha para deploy
    echo "digiurban ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers.d/digiurban
    
    echo "‚úÖ Usu√°rio 'digiurban' criado!"
else
    echo "‚ÑπÔ∏è  Usu√°rio 'digiurban' j√° existe."
fi

# =============================================================================
# 10. CRIA√á√ÉO DA ESTRUTURA DE DIRET√ìRIOS
# =============================================================================

echo "üìÅ Criando estrutura de diret√≥rios..."
mkdir -p /var/www/digiurban
mkdir -p /var/log/digiurban
mkdir -p /var/backups/digiurban

# Definir permiss√µes corretas
chown -R digiurban:digiurban /var/www/digiurban
chown -R digiurban:digiurban /var/log/digiurban
chown -R digiurban:digiurban /var/backups/digiurban

echo "‚úÖ Estrutura de diret√≥rios criada!"

# =============================================================================
# 11. CONFIGURA√á√ÉO DE SWAP (se necess√°rio)
# =============================================================================

echo "üíæ Configurando swap..."
if ! swapon --show | grep -q "/swapfile"; then
    # Criar arquivo de swap de 2GB
    fallocate -l 2G /swapfile
    chmod 600 /swapfile
    mkswap /swapfile
    swapon /swapfile
    
    # Adicionar ao fstab para persistir ap√≥s reinicializa√ß√£o
    echo '/swapfile none swap sw 0 0' >> /etc/fstab
    
    echo "‚úÖ Swap de 2GB configurado!"
else
    echo "‚ÑπÔ∏è  Swap j√° configurado."
fi

# =============================================================================
# 12. CONFIGURA√á√ÉO DE LIMITES DO SISTEMA
# =============================================================================

echo "‚öôÔ∏è  Configurando limites do sistema..."
cat >> /etc/security/limits.conf << EOF
* soft nofile 65536
* hard nofile 65536
* soft nproc 65536
* hard nproc 65536
EOF

cat >> /etc/systemd/system.conf << EOF
DefaultLimitNOFILE=65536
DefaultLimitNPROC=65536
EOF

echo "‚úÖ Limites do sistema configurados!"

# =============================================================================
# 13. CONFIGURA√á√ÉO DE LOGS
# =============================================================================

echo "üìù Configurando logs..."
# Configurar logrotate para logs da aplica√ß√£o
cat > /etc/logrotate.d/digiurban << EOF
/var/log/digiurban/*.log {
    daily
    rotate 30
    compress
    delaycompress
    missingok
    notifempty
    create 0644 digiurban digiurban
    postrotate
        systemctl reload nginx
    endscript
}
EOF

echo "‚úÖ Configura√ß√£o de logs criada!"

# =============================================================================
# 14. INSTALA√á√ÉO DO NODE.JS (para ferramentas auxiliares)
# =============================================================================

echo "üì¶ Instalando Node.js..."
if ! command -v node &> /dev/null; then
    curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
    apt-get install -y nodejs
    
    echo "‚úÖ Node.js instalado!"
else
    echo "‚ÑπÔ∏è  Node.js j√° est√° instalado."
fi

# =============================================================================
# 15. CONFIGURA√á√ÉO DE TIMEZONE
# =============================================================================

echo "üåç Configurando timezone para S√£o Paulo..."
timedatectl set-timezone America/Sao_Paulo

echo "‚úÖ Timezone configurado!"

# =============================================================================
# 16. CONFIGURA√á√ÉO DE BACKUP AUTOM√ÅTICO
# =============================================================================

echo "üíæ Configurando backup autom√°tico..."
# Criar script de backup
cat > /usr/local/bin/backup-digiurban.sh << 'EOF'
#!/bin/bash

# Configura√ß√µes
BACKUP_DIR="/var/backups/digiurban"
APP_DIR="/var/www/digiurban"
DATE=$(date +%Y%m%d_%H%M%S)
RETENTION_DAYS=7

# Criar diret√≥rio de backup
mkdir -p $BACKUP_DIR

# Backup do banco de dados
if docker ps | grep -q "digiurban_db"; then
    echo "Fazendo backup do banco de dados..."
    docker exec digiurban_db pg_dump -U digiurban digiurban_db > $BACKUP_DIR/db_backup_$DATE.sql
    gzip $BACKUP_DIR/db_backup_$DATE.sql
fi

# Backup dos arquivos de configura√ß√£o
if [ -d "$APP_DIR" ]; then
    echo "Fazendo backup dos arquivos de configura√ß√£o..."
    tar -czf $BACKUP_DIR/config_backup_$DATE.tar.gz -C $APP_DIR \
        docker-compose.yml \
        .env.production \
        nginx/ \
        scripts/ \
        2>/dev/null || true
fi

# Remover backups antigos
find $BACKUP_DIR -name "*.sql.gz" -mtime +$RETENTION_DAYS -delete
find $BACKUP_DIR -name "*.tar.gz" -mtime +$RETENTION_DAYS -delete

echo "Backup conclu√≠do: $DATE"
EOF

chmod +x /usr/local/bin/backup-digiurban.sh

# Adicionar ao cron (executar √†s 2h da manh√£)
(crontab -u digiurban -l 2>/dev/null; echo "0 2 * * * /usr/local/bin/backup-digiurban.sh") | crontab -u digiurban -

echo "‚úÖ Backup autom√°tico configurado!"

# =============================================================================
# 17. CONFIGURA√á√ÉO FINAL
# =============================================================================

echo "üîß Configura√ß√£o final..."

# Reiniciar servi√ßos
systemctl restart docker
systemctl restart nginx
systemctl restart fail2ban

# Mostrar status dos servi√ßos
echo "üìä Status dos servi√ßos:"
systemctl is-active docker nginx fail2ban

# Mostrar informa√ß√µes do sistema
echo "üìã Informa√ß√µes do sistema:"
echo "‚Ä¢ OS: $(lsb_release -d | cut -f2)"
echo "‚Ä¢ Kernel: $(uname -r)"
echo "‚Ä¢ Docker: $(docker --version)"
echo "‚Ä¢ Docker Compose: $(docker-compose --version)"
echo "‚Ä¢ Nginx: $(nginx -v 2>&1)"
echo "‚Ä¢ Node.js: $(node --version)"
echo "‚Ä¢ Timezone: $(timedatectl show --property=Timezone --value)"

# =============================================================================
# 18. INSTRU√á√ïES FINAIS
# =============================================================================

echo ""
echo "üéâ ======================================"
echo "üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!"
echo "üéâ ======================================"
echo ""
echo "üìù Pr√≥ximos passos:"
echo "1. Configure as secrets no GitHub:"
echo "   - VPS_HOST: $(hostname -I | awk '{print $1}')"
echo "   - VPS_USER: digiurban"
echo "   - VPS_SSH_KEY: (chave SSH privada)"
echo "   - VPS_PORT: 22"
echo "   - DB_PASSWORD: (senha do PostgreSQL)"
echo "   - JWT_SECRET: (chave secreta JWT)"
echo "   - REDIS_PASSWORD: (senha do Redis)"
echo ""
echo "2. Aponte seu dom√≠nio para este IP: $(hostname -I | awk '{print $1}')"
echo ""
echo "3. Fa√ßa push para a branch main para iniciar o deploy autom√°tico"
echo ""
echo "4. Monitore o deploy em: https://github.com/seu-usuario/digiurban2/actions"
echo ""
echo "‚úÖ Servidor pronto para receber o DigiUrban!"
echo "üåê Acesse: https://www.digiurban.com.br (ap√≥s o deploy)"
echo "" 