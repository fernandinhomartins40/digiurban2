version: '3.8'

services:
  # Aplicação principal
  app:
    build: .
    container_name: digiurban_app
    restart: unless-stopped
    depends_on:
      - db
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgres://digiurban:${DB_PASSWORD}@db:5432/digiurban_db
      - PORT=3000
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - digiurban_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Banco de dados PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: digiurban_db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=digiurban_db
      - POSTGRES_USER=digiurban
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - digiurban_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U digiurban -d digiurban_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx como proxy reverso
  nginx:
    image: nginx:alpine
    container_name: digiurban_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - app
    networks:
      - digiurban_network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot para SSL
  certbot:
    image: certbot/certbot
    container_name: digiurban_certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    container_name: digiurban_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - digiurban_network

volumes:
  postgres_data:
  redis_data:

networks:
  digiurban_network:
    driver: bridge 